const express = require('express');
const { createServer } = require('http');
const { join } = require('path');
const { Server } = require('socket.io');
const { exec } = require('child_process');
const bodyParser = require('body-parser');
const session = require('express-session');
const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;
const axios = require('axios');  // Make sure axios is defined if you are using it in the image blending endpoint

require('dotenv').config();

const app = express();
//
const PORT = process.env.PORT || 5500;
app.use(express.static('public'));
const http = require('http').Server (app);
const io = require('socket. io')(http);
app-get('/', (reg, res) => res.sendFile(_dirname + '/index.html'));

http.listen(PORT, function(){
console.log( 'listening on $(PORT}');
})
//

const server = createServer(app);
//const io = new Server(server);

app.use(express.static('public'));
app.use(bodyParser.json());
app.use(session({ secret: 'secret', resave: false, saveUninitialized: false }));
app.use(passport.initialize());
app.use(passport.session());

const users = [{ id: 1, username: 'user1', password: 'pass1' }, { id: 2, username: 'user2', password: 'pass2' }];

passport.use(new LocalStrategy(
    (username, password, done) => {
        const user = users.find(u => u.username === username && u.password === password);
        if (user) {
            return done(null, user);
        } else {
            return done(null, false, { message: 'Incorrect credentials.' });
        }
    }
));

passport.serializeUser((user, done) => {
    done(null, user.id);
});

passport.deserializeUser((id, done) => {
    const user = users.find(u => u.id === id);
    done(null, user);
});

app.post('/login', passport.authenticate('local'), (req, res) => {
    res.send('Logged in');
    console.log("logged in"); 
});

let prompts = [];
let imageUrls = []; // Store generated image URLs

io.on('connection', (socket) => {
    //console.log('A user connected');
    //socket.on('chat message', (msg) => {
       // io.emit('chat message', msg);  // Broadcast chat message to all clients
   // });


   socket.on('submit title', (data) => {
    //console.log('Received title data:', data);

    const command = `python3 generate_title.py "${data}"`;

    exec(command, (error, stdout, stderr) => {
        if (error || stderr) {
            console.error('Error executing Python script:', error, stderr);
            io.emit('error', 'Failed to generate title');
            return;
        }
        io.emit('new title', stdout.trim());
        console.log("Title generated by ai:", stdout.trim());
    });
});


   
   socket.on('submit bio', (data) => {
    console.log('Received bio data:', data);
    const name = data.name;
    const bio = data.bio;
    const command = `python3 generate_bio.py "${name}" "${bio}"`;

    exec(command, (error, stdout, stderr) => {
        if (error || stderr) {
            console.error('Error executing Python script:', error, stderr);
            io.emit('error', 'Failed to generate bio');
            return;
        }
        io.emit('new bio', stdout.trim());
        console.log("Bio:", stdout.trim());
    });
});
    socket.on('submit header', (data) => {
        io.emit('new header', data);
    });

    socket.on('submit chat', (data) => {
        
            io.emit('new chat', data);
           
    });
        
    socket.on('submit label', (data) => {
        console.log("Received description data and start to do label");
        exec(`python3 generate_label.py "${data}"`, (error, stdout, stderr) => {
            if (error || stderr) {
                console.error('Error executing Python script:', error, stderr);
                io.emit('error', 'Failed to generate label');
                return;
            }
            io.emit('new label', stdout.trim());
            console.log("Label:", stdout.trim());
        });
        
       
    });



    socket.on('submit concept', (prompt) => {
        prompts.push(prompt);
        io.emit('submit concept', prompt);  // Immediately broadcast the prompt to all clients
        const theme = prompt.theme;
        const imagery = prompt.imagery;
        console.log("Combined Prompt:", theme, imagery); // Print out the combined prompt in the terminal
        const command_idea = `python3 generate_conceptualart.py "${theme}" "${imagery}"`;
        const command_idea2= `python3 generate_conceptualart2.py "${theme}" "${imagery}"`;

        // Process image generation every two prompts
        //if (prompts.length >= 1) {
            /*
            const fullPrompt = prompts.join(' '); // Combine the two prompts
            console.log("Combined Prompt:", fullPrompt); // Print out the combined prompt in the terminal
            
            prompts = [];  // Reset prompts after processing
            `python3 generate_conceptualart.py "${fullPrompt}"`
            */

            exec(command_idea, (error, stdout, stderr) => {
                if (error || stderr) {
                    console.error('Error executing Python script:', error, stderr);
                    io.emit('error', 'Failed to generate image');
                    return;
                }
                try {
                    // Assuming stdout is a string with description and URL separated by a newline
                    console.log("Raw output from Python script:", stdout);
                    const outputParts = stdout.split('\n');
                    const url = outputParts[0]; 
                  // const description = outputParts.slice(1).join('\n'); // Join all lines after the first onehe description
                
            
                  
            
                // Finding and extracting the title
                const titleLine = outputParts.find(line => line.startsWith('Title:'));
                const title = titleLine ? titleLine.split('Title:')[1].trim().replace(/^"|"$/g, '') : 'No title provided';
                io.emit("new label and article title", title);
                // Extracting the description
                const descriptionStartIndex = outputParts.findIndex(line => line.startsWith('Description:')) + 1;
                const description = outputParts.slice(descriptionStartIndex).join('\n').trim();
            
                     // Process the title
                   //  console.log("Title:", title);
                    //io.emit('new title',title);
            
                    // Process the description
                    console.log("Description:", description);
                    io.emit('new description', description);

            
                    // Process the URL
                    const matches = url.match(/https:\/\/[^"]+/); // Regex to extract URL
                    if (matches && matches[0]) {
                        imageUrls.push(matches[0]); // Store the generated image URL
                        io.emit('new image', matches[0]);
                    } else {
                        io.emit('error', 'No image URL found');
                        console.error('No URL found in Python script output:', stdout);
                    }
                } catch (err) {
                    console.error('Error processing output:', err);
                    io.emit('error', 'Error processing image data');
                }
            });



            exec(command_idea2, (error, stdout, stderr) => {
                if (error || stderr) {
                    console.error('Error executing ççPython script:', error, stderr);
                    callback('Failed to generate image');
                    return;
                }
                try {
                    console.log("Raw output 2 from Python script:", stdout);
                    const outputParts2 = stdout.split('\n');
                    const url2 = outputParts2[0];
        
                    const titleLine2 = outputParts2.find(line => line.startsWith('Title:'));
                    const title2 = titleLine2 ? titleLine2.split('Title:')[1].trim().replace(/^"|"$/g, '') : 'No title provided';
        
                    const descriptionStartIndex2 = outputParts2.findIndex(line => line.startsWith('Description:')) + 1;
                    const description2 = outputParts2.slice(descriptionStartIndex2).join('\n').trim();
        
                    console.log("Title2:", title2);
        
                    const matches2 = url2.match(/https:\/\/[^"]+/);
                    if (matches2 && matches2[0]) {
                        io.emit('new image 2', matches2[0]);
                    } else {
                        console.error(' 2 No URL found in Python script output:', stdout);
                        //callback('2 No image URL found');
                        io.emit('error', 'No image URL found 2');
                    }
                } catch (err) {
                    console.error('2 Error processing output:', err);
                    io.emit('error', 'No image URL found 2');
                }
            });

            
        }
    );



    socket.on('merge_image', () => {
        console.log('Received merge image event'); 
        
        // Check if there are at least two image URLs stored
        if (imageUrls.length < 2) {
            io.emit('error', 'Not enough image URLs for merging');
            return;
        }
        console.log(imageUrls[0]); 
        console.log(imageUrls[1]); 
        exec(`python3 generate_blend_image.py "${imageUrls[0]}" "${imageUrls[1]}"`, (error, stdout, stderr) => {
            if (error || stderr) {
                console.error('Error executing Python script:', error, stderr);
                io.emit('error', 'Failed to generate merged image');
                return;
            }
            try {
                console.log("Raw output from Python script of merge:", stdout);
                const matches = stdout.match(/https:\/\/[^"]+/);  // Regex to extract URL
                if (matches && matches[0]) {
                    io.emit('new image middle', matches[0]);
                } else {
                    io.emit('error', 'No image URL found');
                    console.error('No URL found in Python script output:', stdout);
                }
            } catch (err) {
                console.error('Error processing output:', err);
                io.emit('error', 'Error processing merged image data');
            }
        });
        
    });
});

app.get('/', (req, res) => {
   // if (!req.isAuthenticated()) {
     //   res.redirect('/login.html'); // Assuming you have a login.html file
    //} else {
        
        res.sendFile(join(__dirname, 'public/home.html'));//
  //  }
});



server.listen(3000, () => {
    console.log('Server running at http://localhost:3000');
});


/*
    exec(`python3 controller.py`, (error, stdout, stderr) => {
        if (error || stderr) {
            console.error('Error executing Python script:', error, stderr);
            io.emit('error', 'Failed to generate bio');
            return;
        }
        if(stdout=="received!"){
            io.emit('new stamp');
        }
        console.log("sss");
    });
    */